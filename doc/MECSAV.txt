.Create Save

Lbl CSAV {
    .Creates a new savefile for MExp
    .Directly returns the creation status (0 good, higher bad)
    .Must have loaded the world file first to create the save file from

    .Saving variables to the stack
    S-8->S
    A->{S}^r
    B->{S+2}^r
    C->{S+4}^r
    D->{S+6}^r

    .Finding stats about this world file
    IDWO(0)->A  .number of islands
    0->G        .number of entities
    For(H,1,A)
        IDWO(H*2)->I
        IDBY(I)+G->G
    End
    IMBY(0)->MW   .map width
    IMBY(1)->MH   .map height

    .Deleting save file if it exists
    DelVar Str1FSAVE

    .Creating new save file
    24->H .cumulative size of save file (4*2B ptrs + 8B checksum + 4*2B sizes)

    .EMAP is the same size as IMAP
    IMWO(-2)->I
    I+H->H

    .CENT has 64B + (2B per island) + (12B per entity) + (12B player)
    G*6+A*2+76->J
    J+H->H

    .EPTR has 2B num islands + 2B player entity pointer
        + (4B per island (pointer + ent count)) + (2B per entity pointer)
    A*2+G*2+4->K
    K+H->H

    .UNDO has 1800B undo space + 2B last move pointer
    1802+H->H

    .Allocating whole save file
    GetCalc(Str1FSAVE,H)->SF

    .Exit early if we couldn't allocate save file
    !If SF
        3->T .Bad exit code (could not allocate new save file)
        Goto CSAVE
    End

    .Saving pointers to virtual files
    18->{SF}^r      .offset to EMAP
    SF+18->EM
    20+I->G         .offset to CENT
    G->{SF+2}^r
    G+SF->CE
    G+J+2->G        .offset to EPTR
    G->{SF+4}^r
    G+SF->EP
    G+K+2->G        .offset to UNDO
    G->{SF+6}^r
    G+SF->UN

    .Saving basic properties to files
    I->{EM-2}               .EMAP size
    MW->{EM}                .EMAP map width
    MH->{EM+1}              .EMAP map height
    I-1->H
    For(G,2,H)              .EMAP zeroing out
        0->{EM+G}
    End
    J->{CE-2}^r             .CENT size
    A->{CE}^r               .CENT num islands
    A*2+16->{A*2+2+CE}^r    .CENT first empty pointer
    K->{EP-2}^r             .EPTR size
    A->{EP}^r               .EPTR num islands
    A*2+4->C                .EPTR first island pointer
    1802->{UN-2}^r          .UNDO size
    2->{UN}^r               .UNDO first block pointer
    0->{UN+2}^r             .UNDO first block header

    .Putting the checksum into the save file
    CCSM()
    Copy(S-8,SF+8,8)

    .Putting a dummy player entity in the world, for island resetting
    .NOTE: all C in the following statements actually represent A*2+4
    .   but they're just C since C already holds that value
    For(G,0,11)
        0->{C+G+CE} .(CENT)
    End
    C->{C-2+EP}^r   .(EPTR)
    1->{2+EM}       .(EMAP)

    .Iterating through each island
    1->D    .first island
    For(B,1,A)
        .Getting number of entities on this island
        IDWO(B*2)->G
        IDBY(G)->H

        .Add pointer to first entity in CENT
        .NOTE: all C in the following statements actually represent A*2+4
        .   but they're just C since C already holds that value
        B=1?C,0
        ->{B*2+CE}^r

        .Add pointer to island data in EPTR, and num ents on island
        C->{B*2+EP}^r
        H->{C+EP}^r
        C+2->C

        .Iterate entities, set their EPTR to zero
        For(I,1,H)
            0->{C+EP}^r
            C+2->C
        End

        .Check if this is the first island
        If IDBY(G+4)
            B->D
        End

        .Reset the island
        RSTI(B)
    End

    .Resetting the first island to put the player there
    RSTI(D)

    .Good exit code
    0->T

    .End
    Lbl CSAVE

    .Recover the stack
    {S}^r->A
    {S+2}^r->B
    {S+4}^r->C
    {S+6}^r->D
    S+8->S

    .(return)
    TReturn
}
