.Move Entity (Raw)

Lbl MVER {
    .Move entity (raw)
    .Just moves an entity without any logic or collision checking
    .Will not change the entity's position in CENT
    .r1: Pointer to entity
    .r2-r4: Target X,Y,Z

    .Storing arguments and vars to stack
    .Also allocating a little space to store the entity's prev. position
    SSRG()
    S-6->S
    r_1->{S}^r
    r_2->{S+2}
    r_3->{S+3}

    .Logging MVER for undo
    1->{S-6}
    {r_1+3}^r->{S-5}^r
    {r_1+1}^r->{S-3}^r
    {r_1+5}->{S-1}
    LGUN()

    .Storing entity start position on stack
    {r_1+1}->{S+4}
    {r_1+2}->{S+5}

    .Finding height diff from old to new position
    r_4-{r_1+5}->B

    .Finding current EMAP and target position EMAP value
    GEIA({S+4},{S+5})->E
    GIAT({S+2},{S+3})        .First check if there's an island at target
        ??GEIA({S+2},{S+3})  .Then if there's already entity at target
        ??E                  .Default to current EMAP val
    ->F                      .(Store the result to F)

    .Getting all entities at the current position, absorbing them into stack
    GSEH({S+4},{S+5})->A
    -A*2+S->S

    .Moving our entity and all entities above to new position
    For(C,0,A-1)
        .Getting pointer to current entity in stack
        C*2+S->G
        {G}^r->D

        .Moving the entity's position in CENT
        A*2+S->H
        {H+2}->{D+1}
        {H+3}->{D+2}
        {D+5}+B->{D+5}

        .Moving entity from one island to another if needed
        E!=F?CHEI(D,E,F)

    .(Break from the loop if we just moved our original entity!)
    EndIf {A*2+S}^r=D

    .Dropping entities at previous position from stack
    A*2+S->S

    .Clearing prev. EMAP pos if we moved everything
    If A-1<=C
        {S+4}->G
        {S+5}->H
        0->{H*MW+G+2+EM}
    End

    .Setting the new EMAP pos regardless
    {S+2}->G
    {S+3}->H
    F->{H*MW+G+2+EM}
    
    .Restoring stack and variables
    S+6->S
    RSRG()

    .(return)
    Return
}
