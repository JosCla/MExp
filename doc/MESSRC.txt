.MESAVE

.main function
L_1+500->S
sub(FSTR)
sub(CSAV)
Return

LSAV {
    .Loads a save file

    .Loading all world files
    GetCalc(Str1FIMAP,Y_1)->G
    GetCalc(Str1FIDAT,Y_2)->H
    GetCalc(Str1FHMAP,Y_3)->I
    GetCalc(Str1FOMAP,Y_4)->J

    !If G and H and I and J
        1->T .Bad exit code
        Return
    End

    .Getting pointers to all save data
    GetCalc(Str1FEMAP)->EM
    GetCalc(Str1FCENT)->CE
    GetCalc(Str1FEPOS)->EP
    GetCalc(Str1FPDAT)->PD

    .Exiting if that failed
    !If EM and CE and EP and PD
        2->T .Bad exit code
        Return
    End

    .Getting map dimensions
    {EM}->MW
    {EM+1}->MH

    .Loading the player entity
    Copy(^PD+4,^PE,8)

    .Putting camera in the right spot
    {^PD}->CX
    {^PD+1}->CY
    {^PD+2}->CZ

    .(return)
    0->T .Good exit code
    Return
}

Lbl CSAV {
    .Creates a new savefile for MExp

    .Generates the entity map (MEEMAP.8xv)
    .Generates the current entities (MECENT.8xv)
    .Generates the current entity positions (MEEPOS.8xv)
    .Generates the player data (MEPDAT.8xv)

    .Requires MEIMAP.8xv for size
    .Requires MEIDAT.8xv for entities

    .Saving some variables to the stack
    S-16->S
    A->{S}^r
    B->{S+2}^r
    C->{S+4}^r
    D->{S+6}^r
    E->{S+8}^r
    F->{S+10}^r

    .Allocating space for:
    .  S+12: number of snowfolk
    .  S+13-15: player start position
    0->{S+12}->{S+13}->{S+14}->{S+15}

    .First opening all needed world files to make sure they're there
    GetCalc(Str1FIMAP,Y_1)->A .IMAP
    GetCalc(Str1FIDAT,Y_2)->B .IDAT
    GetCalc(Str1FHMAP,Y_3)->C .HMAP
    !If A?B?C
        1->T .Bad exit code (world files not present)
        Goto CSAVE
    End

    .Finding stats like number of islands and total number of entities
    {Y_2}^r->G  .number of islands
    0->H  .number of entities
    For(I,1,G)
        {2*I+Y_2}^r->J
        .if you switch {J+Y_2} and H in the following statement, it acts as
        .  if the line was just {J+Y_2}->H. i don't get it.
        {J+Y_2}+H->H
    End
    {Y_1}->E      .map width
    {Y_1+1}^r->F  .map height

    .Deleting save file if it exists
    DelVar Str1FEMAP
    DelVar Str1FCENT
    DelVar Str1FEPOS
    DelVar Str1FPDAT

    .Creating new save files
    
    .EMAP is same size as IMAP
    GetCalc(Str1FEMAP, {Y_1-2}^r)->A

    .CENT has 64B + (2B per island) + (12B per entity)
    GetCalc(Str1FCENT, H*6+G*2+64)->B

    .EPOS has 2B + (4B per island (pointer + ent count)) + (2B per entity)
    GetCalc(Str1FEPOS, G*2+H*2+2)->C

    .Exit early if we couldn't allocate files
    !If A?B?C
        2->T .Bad exit code (could not allocate new files)
        Goto CSAVE
    End

    .Saving basic properties to files
    E->{A}                .EMAP map width
    F->{A+1}              .EMAP map height
    For(I,2,{Y_1-2}^r-1)  .EMAP zeroing out
    0->{A+I}
    End
    G->{B}^r  .CENT num islands
    G*2+4->T  .CENT first island pointer
    G->{C}^r  .EPOS num islands
    G*2+2->U  .EPOS first island pointer

    .Then, we iterate through each island
    For(I,1,G)
        .Get the pointer to the island
        {2*I+Y_2}^r->J

        .If the island is our starting island, then record the player's pos
        If {J+3+Y_2}
            {J+1+Y_2}->K->{S+13}
            {J+2+Y_2}->L->{S+14}
            {L*E+K+2+Y_3}->{S+15}
        End

        .Add pointer to island data in CENT if applicable
        If {J+Y_2}
            T->{I*2+B}^r
        Else
            0->{I*2+B}^r
        End

        .Add pointer to island data in EPOS, add num ents on island
        U->{I*2+C}^r
        {J+Y_2}->{U+C}
        U+2->U

        .Iterate through each island's entities
        For(K,1,{J+Y_2})
            .Get pointer to the entity
            8*K+J->L

            .If the entity is a snowfolk, increment snowfolk count
            {L+Y_2}=7?{S+12}++

            .Find its X and Y, put those in M and N
            {L+1+Y_2}->M
            {L+2+Y_2}->N

            .Store the current island number to its pos in EMAP
            I->{E*N+M+2+A}

            .Copy entity to CENT, add pointers
            Copy(L+Y_2,T+B,8)
            If (K=1)
                0->{T+8+B}^r
            Else
                T-12->{T+8+B}^r
            End
            If (K={J+Y_2})
                0->{T+10+B}^r
            Else
                T+12->{T+10+B}^r
            End
            T+12->T

            .Copy entity position to EPOS
            M->{U+C}
            N->{U+C+1}
            U+2->U
        End
    End

    .Add first empty pointer to CENT
    T->{G*2+2+B}^r

    .(And add the empty space in question)
    For(I,0,59)
        0->{T+I+B}
    End

    .Now, allocating space for PDAT
    .  14B: Camera, player entity, pointer to island and snowfolk bitmap
    .  1+ceil(islands/8)B: Islands discovered
    .  1+ceil(snowfolk/8)B: Snowfolk discovered
    G/8+1->I
    {S+12}/8+1->J
    GetCalc(Str1FPDAT, I+J+16)->D
    !If D
        3->T .Bad exit code (Could not allocate PDAT)
        Goto CSAVE
    End

    .Adding camera position
    {S+13}>4?{S+13}-5,0
        ->{D}
    {S+14}>2?{S+14}-3,0
        ->{D+1}
    {S+15}->{D+2}
    
    .Adding unused byte and player entity
    0->{D+3}->{D+4}->{D+7}->{D+8}->{D+10}->{D+11}
    {S+13}->{D+5}
    {S+14}->{D+6}
    {S+15}->{D+9}

    .Adding island bitmap
    14->K->{D+12}
    G->{K+D}
    For(L,1,I)
        0->{K+L+D}
    End

    .Adding snowfolk bitmap
    15+I->K->{D+13}
    {S+12}->{K+D}
    For(L,1,J)
        0->{K+L+D}
    End

    .Good exit code
    0->T

    .End
    Lbl CSAVE

    .Recover the stack
    {S}^r->A
    {S+2}^r->B
    {S+4}^r->C
    {S+6}^r->D
    {S+8}^r->E
    {S+10}^r->F
    S+16->S

    .(return)
    Return
}
