.Current Entities Utilities

Lbl RMEN {
    .Removes an entity from CENT
    .Will update its pointer in EPTR to 0
    .r1: Pointer to entity
    .Returns a pointer to the next entity in the linked list, relative to CE
    .  (returns 0 if there is none)

    .Allocating stack
    SSRG()
    S-7->S

    .Saving pointer to entity to remove in A
    r_1->A

    .Logging first part of entity removal
    5->{S-6}
    Copy(A,S-5,5)
    LGUN()
    .Logging second part of entity removal
    GEIA({A+1},{A+2})->G
    4->{S-6}
    G->{S-5}
    Copy(A+5,S-4,3)
    LGUN()

    .Saving entity's position on the stack for later use
    {A+1}^r->{S+4}^r
    {A+5}->{S+6}

    .First removing the entity from its linked list
    {A+8}^r->G    .prev pointer
    {A+10}^r->B   .next pointer

    .Correcting the next entity's previous entity pointer
    If B
        G->{B+8+CE}^r
    End

    .Correcting the previous entity's (or list head's) next entity pointer
    If G
        B->{G+10+CE}^r
    Else
        .If list head, find which island owns this entity
        GEIA({A+1},{A+2})->I
        B->{I*2+CE}^r
    End

    .Changing the pointer to this entity in EPTR to 0 (DNE)
    GEPP({A+3},{A+4})->G
    0->{G}^r

    .If the entity is a raft that owns another log, set that log's EPTR to 0
    .   as well (DNE)
    If {A+6}?{A}=5??{A}=6
        GEPP({A+6},{A+7})->G
        0->{G}^r
    End

    .If there's nothing left here, set EMAP to zero
    GSEH({A+1},{A+2})->I
    !If I
        {A+1}->G
        {A+2}->H
        0->{H*MW+G+2+EM}
    End

    .Copying in the final entity in CENT to where this entity was
    {CE}^r->G       .num islands
    G*2+2+CE->H     .pointer to pointer to first empty slot
    {H}^r-12->I     .pointer to final entity
    I->{H}^r        .resetting first empty pointer
    If B=I
        .If the next entity in our list is what we're moving in, reset the
        .   next pointer to where it will be
        A->B
    End
    I+CE->I
    If A!=I
        MENC(I,A)   .performing movement
    End

    .Moving down all entities above the entity, if applicable
    GLEA({S+4},{S+5},{S+6})->G .Lowest entity above (0 if none)
    If G
        MVER(G,{S+4},{S+5},{S+6})
    End

    .Getting ready to return B (pointer to next entity)
    B->G

    .Fixing stack
    S+7->S
    RSRG()

    GReturn
}

Lbl MENC {
    .Move entity in CENT
    .Will an entity's data around in CENT
    .r1: Pointer to entity
    .r2: New pointer to locate entity at
    .Returns nothing

    .Allocating stack
    SSRG()

    .Saving entity pointers in A and B
    r_1->A
    r_2->B

    {A+8}^r->G  .prev pointer
    {A+10}^r->H .next pointer

    .Correcting the next entity's previous entity pointer
    If H
        B-CE->{H+8+CE}^r
    End

    .Correcting the previous entity's (or list head's) next entity pointer
    If G
        B-CE->{G+10+CE}^r
    Else
        .If list head, find which island owns this entity
        GEIA({A+1},{A+2})->I
        B-CE->{I*2+CE}^r
    End

    .Changing the pointer to this entity in EPTR
    GEPP({A+3},{A+4})->G
    B-CE->{G}^r

    .If this is a raft containing another log,
    .   changing its pointer in EPTR as well
    If {A+7}?{A}=5??{A}=6
        GEPP({A+6},{A+7})->G
        CE-B->{G}^r
    End

    .Actually performing the movement
    Copy(A,B,12)

    ."Invalidating" the previous entity position for debugging purposes
    -1->{A}

    .Fixing stack
    RSRG()

    Return
}
